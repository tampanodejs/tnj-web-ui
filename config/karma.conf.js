// Karma configuration
// Generated on Tue Dec 16 2014 19:55:30 GMT-0700 (MST)
// jscs: disable
module.exports = function(config) {
  var buildConfig = require('./build.conf.js');

  config.set({

    // base path that will be used to resolve all patterns (eg. files,
    // exclude)
    basePath: '../',

    // frameworks to use
    // available frameworks:
    // https://npmjs.org/browse/keyword/karma-adapter
    frameworks: ['jasmine'],

    /**
     * list of files / patterns to load in the browser
     * dynamically generated by karma-config task
     */
    files: buildConfig.vendor.js.concat(buildConfig.app.jsunit,
      buildConfig.app.modules, buildConfig.app.js),

    // list of files to exclude
    exclude: [],

    // preprocess matching files before serving them to the browser
    // available preprocessors:
    // https://npmjs.org/browse/keyword/karma-preprocessor
    preprocessors: {
      // source files to generate coverage for
      'src/**/*.js': ['coverage']
    },

    // coverage reporter options
    coverageReporter: {
      // custom output directory
      dir: 'code-coverage'
    },

    // test results reporter to use
    // possible values: 'dots', 'progress'
    // available reporters:
    // https://npmjs.org/browse/keyword/karma-reporter
    reporters: ['dots', 'coverage'],

    // web server port
    port: 9876,

    // enable / disable colors in the output (reporters and logs)
    colors: true,

    // level of logging
    // possible values: config.LOG_DISABLE || config.LOG_ERROR ||
    // config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG
    logLevel: config.LOG_INFO,

    // enable / disable watching file and executing tests whenever any
    // file changes
    autoWatch: true,

    // start these browsers
    // available browser launchers:
    // https://npmjs.org/browse/keyword/karma-launcher
    browsers: ['PhantomJS'],

    // Continuous Integration mode
    // if true, Karma captures browsers, runs the tests and exits
    singleRun: false,

    // The following settings is to account for high CPU usage in certain
    // environments An autowatch default of 250ms sometimes hits the CPU
    // usage threshold, and ditto for the polling.
    autoWatchBatchDelay: 600,
    usePolling: false
  });
};
